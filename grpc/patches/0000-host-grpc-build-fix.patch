diff --git a/CMakeLists.txt b/CMakeLists.txt
index d7ab59a..b82f6fb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -49,12 +49,16 @@ option(gRPC_BUILD_TESTS "Build tests" OFF)
 option(gRPC_BUILD_CODEGEN "Build codegen" ON)
 option(gRPC_BUILD_CSHARP_EXT "Build C# extensions" ON)
 option(gRPC_BACKWARDS_COMPATIBILITY_MODE "Build libraries that are binary compatible across a larger number of OS and libc versions" OFF)
+option(gRPC_BUILD_PLUGIN_SUPPORT_ONLY "Build plugin support only" OFF)

 set(gRPC_INSTALL_default ON)
 if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
   # Disable gRPC_INSTALL by default if building as a submodule
   set(gRPC_INSTALL_default OFF)
 endif()
+if(gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+  set(gRPC_INSTALL_default OFF)
+endif()
 set(gRPC_INSTALL ${gRPC_INSTALL_default} CACHE BOOL
     "Generate installation target")

@@ -557,6 +562,8 @@ add_custom_target(plugins
   DEPENDS ${_gRPC_PLUGIN_LIST}
 )

+if (NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+
 add_custom_target(tools_c
   DEPENDS
 )
@@ -568,6 +575,8 @@ add_custom_target(tools_cxx
 add_custom_target(tools
   DEPENDS tools_c tools_cxx)

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY
+
 protobuf_generate_grpc_cpp_with_import_path_correction(
   src/proto/grpc/channelz/channelz.proto src/proto/grpc/channelz/channelz.proto
 )
@@ -1292,6 +1301,7 @@ if(gRPC_BUILD_TESTS)
     DEPENDS buildtests_c buildtests_cxx)
 endif()

+if (NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)

 add_library(address_sorting
   third_party/address_sorting/address_sorting.c
@@ -1344,6 +1354,8 @@ if(gRPC_INSTALL)
   )
 endif()

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY
+
 if(gRPC_BUILD_TESTS)

 add_library(end2end_tests
@@ -1497,6 +1509,8 @@ target_link_libraries(end2end_tests

 endif()

+if(NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+
 add_library(gpr
   src/core/lib/gpr/alloc.cc
   src/core/lib/gpr/atm.cc
@@ -2488,6 +2502,8 @@ if(gRPC_INSTALL)
   )
 endif()

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY
+
 if(gRPC_BUILD_TESTS)

 add_library(grpc_test_util
@@ -2602,6 +2618,8 @@ endif()

 endif()

+if(NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+
 add_library(grpc_unsecure
   src/core/ext/filters/census/grpc_context.cc
   src/core/ext/filters/channel_idle/channel_idle_filter.cc
@@ -3086,6 +3104,8 @@ if(gRPC_INSTALL)
   )
 endif()

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY
+
 if(gRPC_BUILD_TESTS)

 if(gRPC_BUILD_CODEGEN)
@@ -3169,6 +3189,8 @@ endif()

 endif()

+if(NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+
 add_library(grpc++
   src/core/ext/transport/binder/client/binder_connector.cc
   src/core/ext/transport/binder/client/channel_create.cc
@@ -3615,6 +3637,7 @@ if(gRPC_INSTALL)
   )
 endif()

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY

 if(gRPC_BUILD_CODEGEN)
 add_library(grpc++_reflection
@@ -3869,6 +3892,8 @@ target_link_libraries(grpc++_test_util

 endif()

+if(NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+
 add_library(grpc++_unsecure
   src/cpp/client/channel_cc.cc
   src/cpp/client/client_callback.cc
@@ -4157,6 +4182,7 @@ if(gRPC_INSTALL)
   )
 endif()

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY

 add_library(grpc_plugin_support
   src/compiler/cpp_generator.cc
@@ -4216,7 +4242,7 @@ foreach(_hdr
 endforeach()


-if(gRPC_INSTALL)
+if(gRPC_INSTALL OR gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
   install(TARGETS grpc_plugin_support EXPORT gRPCTargets
     RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
     BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
@@ -4300,6 +4326,8 @@ endif()

 endif()

+if(NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
+
 add_library(upb
   third_party/upb/third_party/utf8_range/naive.c
   third_party/upb/third_party/utf8_range/range2-neon.c
@@ -4396,6 +4424,8 @@ target_link_libraries(bad_server_response_test
   grpc_test_util
 )

+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY
+

 endif()
 if(gRPC_BUILD_TESTS)
@@ -11064,7 +11094,7 @@ target_link_libraries(grpc_completion_queue_test


 endif()
-if(gRPC_BUILD_CODEGEN AND gRPC_BUILD_GRPC_CPP_PLUGIN)
+if(gRPC_BUILD_GRPC_CPP_PLUGIN)

 add_executable(grpc_cpp_plugin
   src/compiler/cpp_plugin.cc
@@ -11094,7 +11124,7 @@ target_link_libraries(grpc_cpp_plugin



-if(gRPC_INSTALL)
+if(gRPC_INSTALL OR gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
   install(TARGETS grpc_cpp_plugin EXPORT gRPCTargets
     RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
     BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
@@ -11311,8 +11341,9 @@ if(gRPC_INSTALL)
 endif()

 endif()
-if(gRPC_BUILD_CODEGEN AND gRPC_BUILD_GRPC_PYTHON_PLUGIN)

+
+if(gRPC_BUILD_GRPC_PYTHON_PLUGIN)
 add_executable(grpc_python_plugin
   src/compiler/python_plugin.cc
 )
@@ -11341,7 +11372,7 @@ target_link_libraries(grpc_python_plugin



-if(gRPC_INSTALL)
+if(gRPC_INSTALL OR gRPC_BUILD_PLUGIN_SUPPORT_ONLY)
   install(TARGETS grpc_python_plugin EXPORT gRPCTargets
     RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
     BUNDLE DESTINATION  ${gRPC_INSTALL_BINDIR}
@@ -22610,7 +22641,7 @@ endif()



-
+if (NOT gRPC_BUILD_PLUGIN_SUPPORT_ONLY)

 if(gRPC_INSTALL)
   install(EXPORT gRPCTargets
@@ -22707,3 +22738,5 @@ generate_pkgconfig(
   "-lgrpc++_unsecure"
   ""
   "grpc++_unsecure.pc")
+
+endif() # gRPC_BUILD_PLUGIN_SUPPORT_ONLY
diff --git a/cmake/protobuf.cmake b/cmake/protobuf.cmake
index f23f65d..a6c05f4 100644
--- a/cmake/protobuf.cmake
+++ b/cmake/protobuf.cmake
@@ -41,6 +41,8 @@ if(gRPC_PROTOBUF_PROVIDER STREQUAL "module")
       set(_gRPC_PROTOBUF_PROTOC protoc)
       if(CMAKE_CROSSCOMPILING)
         find_program(_gRPC_PROTOBUF_PROTOC_EXECUTABLE protoc)
+	message(STATUS "Finding protoc with find_program, result (overriding): ${_gRPC_PROTOBUF_PROTOC_EXECUTABLE}")
+	set(_gRPC_PROTOBUF_PROTOC_EXECUTABLE /home/jphillips/code-projects/openwrt/staging_dir/hostpkg/bin/protoc)
       else()
         set(_gRPC_PROTOBUF_PROTOC_EXECUTABLE $<TARGET_FILE:protoc>)
       endif()
@@ -56,7 +58,6 @@ if(gRPC_PROTOBUF_PROVIDER STREQUAL "module")
   endif()
 elseif(gRPC_PROTOBUF_PROVIDER STREQUAL "package")
   find_package(Protobuf REQUIRED ${gRPC_PROTOBUF_PACKAGE_TYPE})
-
   # {Protobuf,PROTOBUF}_FOUND is defined based on find_package type ("MODULE" vs "CONFIG").
   # For "MODULE", the case has also changed between cmake 3.5 and 3.6.
   # We use the legacy uppercase version for *_LIBRARIES AND *_INCLUDE_DIRS variables
@@ -75,7 +76,10 @@ elseif(gRPC_PROTOBUF_PROVIDER STREQUAL "package")
       set(_gRPC_PROTOBUF_PROTOC_LIBRARIES ${PROTOBUF_PROTOC_LIBRARIES})
       set(_gRPC_PROTOBUF_WELLKNOWN_INCLUDE_DIR ${PROTOBUF_INCLUDE_DIRS})
     endif()
-    if(TARGET protobuf::protoc)
+    if(gRPC_PROTOBUF_PROTOC_EXECUTABLE)
+	message(STATUS "Overriding protoc to: ${gRPC_PROTOBUF_PROTOC_EXECUTABLE}")
+      	set(_gRPC_PROTOBUF_PROTOC_EXECUTABLE "${gRPC_PROTOBUF_PROTOC_EXECUTABLE}")
+    elseif(TARGET protobuf::protoc)
       set(_gRPC_PROTOBUF_PROTOC protobuf::protoc)
       if(CMAKE_CROSSCOMPILING)
         find_program(_gRPC_PROTOBUF_PROTOC_EXECUTABLE protoc)
